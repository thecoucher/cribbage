{"version":3,"sources":["constants.js","reducers/deck.js","reducers/index.js","store/configureStore.js","actions/actions.js","components/Hand.js","cribbage.js","components/Results.js","forms/CustomHand.js","App.js","index.js","images/card_back.jpg"],"names":["ActionTypes","defaultState","deck","state","action","type","types","showResults","showCustomHand","deck_id","data","cardsLeft","showError","error","hand","sortedHand","newHand","combineReducers","logger","createLogger","collapsed","store","createStore","rootReducer","applyMiddleware","thunk","getNewDeck","getNewCards","cards","Hand","props","buttonText","cardsImages","length","map","card","index","className","src","image","key","code","id","alt","cardback","onClick","getHand","sortHand","style","display","patternsOfThree","patternsOfFour","convertToIntegers","value","isNaN","parseInt","twoSum","arr","target","result","i","j","push","findRun","pattern","runFound","k","val","countOcurrences","c","count","getFifteenSums","sumPairs","cardHand","fifteenPairs","getFifteenPairs","sumTriplets","pairTarget","shift","start","fifteenTriplets","p","temp","getFifteenTriplets","sumQuartets","fifteenQuartets","sum","splice","getFifteenQuartets","sumQuintet","fifteenQuartet","getFifteenQuintet","getRuns","sortedCards","copyOfCards","sort","a","b","sortCards","runsResult","runOf5Found","runOf4Found","uuid","require","Results","cardsToHighlight","elem","document","getElementById","border","cardsToRemoveHighlight","pairResult","sumsResult","flushResult","nibsResult","score","displayPairs","displaySums","displayRuns","displayFlush","displayNibs","pairResults","this","fullHand","totalScore","charArray","convertToChars","uniqueSet","Set","uniqueValues","finalResult","resultObj","resultLength","description","getPairs","copyOfHand","checkAllEqual","every","suit","allEqual","pop","getFlushes","communitySuit","getNibs","tallyTheScores","showResultsCheckbox","inline","checked","onChange","setShowResults","onMouseOver","addHighlight","onMouseOut","removeHighlight","Fragment","Component","connect","handleChange","event","preventDefault","onCustomHandChange","name","showCardOptions","showSuitOptions","showCustomHandCheckbox","setShowCustomHand","onSubmit","App","codeMap","ACE","2","3","4","5","6","7","8","9","10","JACK","QUEEN","KING","bind","fetch","then","response","ok","Error","json","dispatch","actions","remaining","catch","console","message","url","swal","cardA","cardB","comparison","compareCardValues","charAt","position","getCode","newCode","newImage","newCard","toChange","slice","alreadyExists","changeCard","changeSuit","ReactDOM","render","module","exports"],"mappings":"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","file":"static/js/main.e598124c.chunk.js","sourcesContent":["export const ActionTypes = {\r\n  TOGGLE_SHOW_RESULTS: 'TOGGLE_SHOW_RESULTS',\r\n  TOGGLE_SHOW_CUSTOM_HAND: 'TOGGLE_SHOW_CUSTOM_HAND',\r\n  GET_NEW_CARDS: 'GET_NEW_CARDS',\r\n  GET_NEW_DECK: 'GET_NEW_DECK',\r\n  SORT_HAND: 'SORT_HAND',\r\n  CHANGE_HAND: 'CHANGE_HAND',\r\n  SHOW_ERROR: 'SHOW_ERROR'\r\n}\r\n","import { ActionTypes as types } from '../constants'\r\n\r\nlet defaultState = {\r\n  'showResults': false,\r\n  'showCustomHand': false,\r\n  'showError': false,\r\n  'error': '',\r\n  'hand': [],\r\n  'cardsLeft': 0\r\n}\r\n\r\nfunction deck(state = defaultState, action) {\r\n  switch (action.type) {\r\n    case types.TOGGLE_SHOW_RESULTS:\r\n      return {\r\n        ...state,\r\n        showResults: !state.showResults,\r\n      }\r\n    case types.TOGGLE_SHOW_CUSTOM_HAND:\r\n      return {\r\n        ...state,\r\n        showCustomHand: !state.showCustomHand,\r\n      }\r\n    case types.GET_NEW_DECK:\r\n      return {\r\n        ...state,\r\n        deck_id: action.data.deck_id,\r\n        cardsLeft: action.data.cardsLeft,\r\n        showResults: action.data.showResults,\r\n        showError: false,\r\n        error: ''\r\n      }\r\n    case types.GET_NEW_CARDS:\r\n      return {\r\n        ...state,\r\n        hand: action.data.hand,\r\n        cardsLeft: action.data.cardsLeft,\r\n        showResults: action.data.showResults,\r\n        showError: false,\r\n        error: ''\r\n      }\r\n    case types.SORT_HAND:\r\n      return {\r\n        ...state,\r\n        hand: action.data.sortedHand\r\n      }\r\n    case types.CHANGE_HAND:\r\n      return {\r\n        ...state,\r\n        hand: action.data.newHand\r\n      }\r\n    case types.SHOW_ERROR:\r\n      return {\r\n        ...state,\r\n        showError: true,\r\n        error: action.data.error\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default deck\r\n","import { combineReducers } from 'redux'\r\n\r\nimport deck from './deck'\r\n\r\nexport default combineReducers({\r\n  deck: deck\r\n})\r\n","import { applyMiddleware, createStore } from 'redux'\r\nimport { createLogger } from 'redux-logger'\r\nimport thunk from 'redux-thunk'\r\n\r\nimport rootReducer from '../reducers/index'\r\n\r\n// create our own logger with the setting we want\r\nconst logger = createLogger({\r\n  collapsed: true\r\n})\r\n\r\nlet store = createStore(\r\n  rootReducer,\r\n  // Note: logger must be the last middleware to be applied\r\n  applyMiddleware(thunk, logger)\r\n)\r\n\r\nexport default store\r\n","import { ActionTypes as types } from '.././constants'\r\nexport function toggleShowResults() {\r\n  return {\r\n    type: types.TOGGLE_SHOW_RESULTS\r\n  }\r\n}\r\n\r\nexport function toggleShowCustomHand() {\r\n  return {\r\n    type: types.TOGGLE_SHOW_CUSTOM_HAND\r\n  }\r\n}\r\n\r\nexport function getNewDeck(deck_id, cardsLeft, showResults) {\r\n  return {\r\n    type: types.GET_NEW_DECK,\r\n    data: { deck_id: deck_id, cardsLeft: cardsLeft, showResults: showResults }\r\n  }\r\n}\r\n\r\nexport function getNewCards(cards, cardsLeft, showResults) {\r\n  return {\r\n    type: types.GET_NEW_CARDS,\r\n    data: { hand: cards, cardsLeft: cardsLeft, showResults: showResults }\r\n  }\r\n}\r\n\r\nexport function sortHand(sortedHand) {\r\n  return {\r\n    type: types.SORT_HAND,\r\n    data: { sortedHand: sortedHand }\r\n  }\r\n}\r\n\r\nexport function changeHand(newHand) {\r\n  return {\r\n    type: types.CHANGE_HAND,\r\n    data: { newHand: newHand }\r\n  }\r\n}\r\n\r\nexport function showError(error) {\r\n  return {\r\n    type: types.SHOW_ERROR,\r\n    data: { error: error }\r\n  }\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport cardback from './../images/card_back.jpg'\r\n\r\n// Component Hand\r\nconst Hand = (props) => {\r\n  const cards = props.cards\r\n  const buttonText = props.buttonText\r\n  const cardsLeft = props.cardsLeft\r\n  const showError = props.showError\r\n  const error = props.error\r\n  let cardsImages = []\r\n\r\n  if (cards.length > 0) {\r\n    cardsImages = cards.map((card, index) => {\r\n      if (index !== 4) {\r\n        return <img className='card' src={card.image} key={card.code} id={card.code} alt={card.code} />\r\n      } else {\r\n        return <img className='c-card' src={card.image} key={card.code} id={card.code} alt={card.code} />\r\n      }\r\n    })\r\n  } else {\r\n    cardsImages =\r\n      <div className='cribbage-section'>\r\n        <img className='card' src={cardback} alt='1' />\r\n        <img className='card' src={cardback} alt='2' />\r\n        <img className='card' src={cardback} alt='3' />\r\n        <img className='card' src={cardback} alt='4' />\r\n        <img className='c-card' src={cardback} alt='5' />\r\n      </div>\r\n\r\n  }\r\n  return (\r\n    <div className='cribbage-parent'>\r\n      <header>\r\n        <button className='cribbage-button' onClick={() => props.getHand()}>{buttonText}</button>\r\n        <button className='cribbage-button' onClick={() => props.sortHand()}>Sort cards</button>\r\n      </header>\r\n      <div style={{ display: (showError ? 'block' : 'none') }}><p className='connection-error'>{error}</p></div>\r\n      <div><p className='cribbage-text'>Cards remaining in deck: {cardsLeft}</p></div>\r\n      <section>\r\n        <div>{cardsImages}</div>\r\n      </section>\r\n    </div>\r\n  )\r\n}\r\n\r\nHand.propTypes = {\r\n  getHand: PropTypes.func.isRequired,\r\n  sortHand: PropTypes.func.isRequired,\r\n  buttonText: PropTypes.string.isRequired,\r\n  cardsLeft: PropTypes.number.isRequired,\r\n  cards: PropTypes.arrayOf(PropTypes.shape({\r\n    suit: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    image: PropTypes.string.isRequired,\r\n    code: PropTypes.string.isRequired,\r\n  })).isRequired,\r\n}\r\n\r\nexport default Hand\r\n","\r\n// all 10 combinations that a run of three can have\r\nconst patternsOfThree = [\r\n  [0, 1, 2],  // First, second and third card\r\n  [0, 1, 3],  // First, second and fourth card\r\n  [1, 2, 3],  // Second, third and fourth card...\r\n  [0, 1, 4],\r\n  [0, 2, 4],\r\n  [1, 2, 4],\r\n  [0, 3, 4],\r\n  [1, 3, 4],\r\n  [2, 3, 4],\r\n  [0, 2, 3]\r\n]\r\n\r\n// all 4 combinations that a run of 4 can have\r\nconst patternsOfFour = [\r\n  [0, 1, 2, 3],\r\n  [0, 1, 2, 4],\r\n  [0, 1, 3, 4],\r\n  [0, 2, 3, 4],\r\n  [1, 2, 3, 4]\r\n]\r\n\r\n/**\r\n  * Converts each card to a simple integer\r\n  * ACE = 1, Facecards = 10\r\n  * @function convertToIntegers\r\n  * @param {Object[]} - Cards in the players hand\r\n  * @returns {number[]} - Array of numbers representing the cards\r\n  */\r\nfunction convertToIntegers(cards) {\r\n  let arrNoSuits = cards.map(card => card.value)\r\n  // change face cards and ace to numbers\r\n  let arrInteger = arrNoSuits.map(function(card) {\r\n    if (isNaN(card)) {\r\n      card = (card === 'ACE') ? 1 : 10\r\n    } else {\r\n      card = parseInt(card, 10)\r\n    }\r\n    return card\r\n  })\r\n  return arrInteger\r\n}\r\n\r\n/**\r\n  * Sorts the cards and adds 'val' property to represent the points value for each card.\r\n  * example: KING = 14, ACE = 1\r\n  * @function sortCards\r\n  *  @param {Object[]} - Cards in the players hand\r\n  *  @returns {Object[]} - Array of cards that are sorted and have numerica value added\r\n  */\r\nfunction sortCards(cards) {\r\n  let copyOfCards = [...cards]\r\n  for (let i = 0; i < cards.length; i++) {\r\n\r\n    switch (copyOfCards[i].value) {\r\n      case 'ACE':\r\n        copyOfCards[i].val = 1\r\n        break;\r\n      case 'JACK':\r\n        copyOfCards[i].val = 11\r\n        break;\r\n      case 'QUEEN':\r\n        copyOfCards[i].val = 12\r\n        break;\r\n      case 'KING':\r\n        copyOfCards[i].val = 13\r\n        break;\r\n      default:\r\n        copyOfCards[i].val = parseInt(copyOfCards[i].value, 10);\r\n    }\r\n  }\r\n  copyOfCards.sort((a, b) => a.val - b.val)\r\n  return copyOfCards\r\n}\r\n\r\nexport function sumTwoNumbers(a, b) {\r\n  let sum = a + b\r\n  return sum\r\n}\r\n\r\n/**\r\n* Returns array of two number pairs of numbers that sum to the target value\r\n* @function twoSum\r\n* @param {number[]} - Array of integers\r\n* @param {number} - Target value that the pairs should sum to\r\n* @return {number[number[]]} Array of pairs of numbers where each number represents the poistion in the hand\r\n* @example [[1,2], [3,5], [4,5]]\r\n*/\r\nfunction twoSum(arr, target = 15) {\r\n  let result = []\r\n  for (let i = 0; i < arr.length; i++) {\r\n    for (let j = i + 1; j < arr.length; j++) {\r\n      if (arr[i] + arr[j] === target) {\r\n        result.push([i, j])\r\n      }\r\n    }\r\n  }\r\n  return result\r\n}\r\n\r\n/**\r\n* Strips the card array down to a simple array of characters\r\n* @function convertToChars\r\n* @param {Object[]} - Cards in the players hand\r\n* @return {number[]} - Character value of each card\r\n* @example {'5', '4', 'ACE', 'KING', '7'}\r\n*/\r\nfunction convertToChars(cards) {\r\n  let charArray = []\r\n  cards.map(function(card) {\r\n    return charArray.push(card.value)\r\n  })\r\n  return charArray\r\n}\r\n\r\n// checks for a run in a given array of cards\r\n/**\r\n* Checks for a run in a given array of sorted cards\r\n* @function convertToChars\r\n* @param {Object[]} - Cards in the players hand\r\n* @param {number[]} - Pattern of cards to check\r\n* @return {bolean} - Run was found. True/False\r\n* @example {'5', '4', 'ACE', 'KING', '7'}\r\n*/\r\nfunction findRun(hand, pattern) {\r\n  let runFound = true\r\n  for (let k = 0; k < pattern.length - 1; k++) {\r\n    let result = hand[pattern[k + 1]].val - hand[pattern[k]].val\r\n    if (result === 1) {\r\n      continue\r\n    } else {\r\n      runFound = false\r\n    }\r\n  }\r\n  return runFound\r\n}\r\n// quick and dirty way to count occurences of a character in an array\r\nfunction countOcurrences(arr, c) {\r\n  let count = 0\r\n  for (let i = 0; i < arr.length; i++) {\r\n    if (arr[i] === c) {\r\n      count++\r\n    }\r\n  }\r\n  return count\r\n}\r\n\r\n// gets pairs, triplets and quartets of cards in a hand\r\nexport function getPairs(fullHand) {\r\n  // reduce the array to an array of chars\r\n  let charArray = convertToChars(fullHand)\r\n  // creating a set removes duplicates.\r\n  const uniqueSet = new Set(charArray)\r\n  // turn set back to array so that we have an\r\n  // array of unique values in the hand\r\n  const uniqueValues = [...uniqueSet]\r\n  let finalResult = []\r\n  // looping through 3 values - a, j and 3\r\n  for (let i = 0; i < uniqueValues.length; i++) {\r\n    let result = []\r\n    let occurences = countOcurrences(charArray, uniqueValues[i])\r\n    if (occurences > 1) {\r\n      // get index of each one\r\n      for (let k = 0; k < charArray.length; k++) {\r\n        if (uniqueValues[i] === charArray[k]) {\r\n          result.push(fullHand[k])\r\n        }\r\n      }\r\n      let resultObj = {}\r\n      resultObj.result = result\r\n      let resultLength = result.length\r\n      if (resultLength === 2) {\r\n        resultObj.description = 'Pair'\r\n        resultObj.score = 2\r\n      }\r\n      else if (resultLength === 3) {\r\n        resultObj.description = 'Three of a kind'\r\n        resultObj.score = 6\r\n      } else if (resultLength === 4) {\r\n        resultObj.description = 'Four of a kind'\r\n        resultObj.score = 12\r\n      }\r\n      finalResult.push(resultObj)\r\n    }\r\n  }\r\n  return finalResult\r\n}\r\n\r\nexport function getFifteenSums(cards) {\r\n  let totalSums = []\r\n  let sumPairs = getFifteenPairs(cards, 15)\r\n  let sumTriplets = getFifteenTriplets(cards, 15)\r\n  let sumQuartets = getFifteenQuartets(cards, 15)\r\n  let sumQuintet = getFifteenQuintet(cards, 15)\r\n\r\n  totalSums = [...sumPairs, ...sumTriplets, ...sumQuartets, ...sumQuintet]\r\n  return totalSums\r\n}\r\n\r\n\r\n/**\r\n * Returns sets of two cards that sum to the target value\r\n * @param {string[]} cardHand - Array of cards\r\n * @param {number} target - Target value that the 2 cards should sum to\r\n * @return {Array<Array<Cards>>} Array of cards representing cards that sum to the target value\r\n * @example\r\n * [['9h', '6d'], ['7s', '8h']\r\n *\r\n */\r\nfunction getFifteenPairs(cardHand, target = 15) {\r\n  // debugger\r\n  let hand = convertToIntegers(cardHand)\r\n  let result = twoSum(hand, target)\r\n  let fifteenPairs = []\r\n  for (let i = 0; i < result.length; i++) {\r\n    fifteenPairs.push([cardHand[result[i][0]], cardHand[result[i][1]]])\r\n  }\r\n  return fifteenPairs\r\n}\r\n\r\n/**\r\n * Returns sets of three cards that sum to the target value\r\n * @param {string[]} cardHand - Array of cards\r\n * @param {number} target - Target value that the 3 cards should sum to\r\n * @return {Array<Array<string>>} Array of triplets representing cards that sum to the target value\r\n * @example\r\n * [['9h', '4d', '2d'], ['7s', '7h', 'as']\r\n *\r\n */\r\nfunction getFifteenTriplets(cardHand, target = 15) {\r\n  let hand = convertToIntegers(cardHand)\r\n  let pairTarget = target - hand[0]\r\n  hand.shift()\r\n  let start = 0\r\n  // let intermediateResult = []\r\n  let fifteenTriplets = []\r\n  for (let j = start + 1; j < hand.length + 2; j++) {\r\n    let result = twoSum(hand, pairTarget)\r\n    for (let p = 0; p < result.length; p++) {\r\n      let temp = [cardHand[j - 1]]\r\n      temp.push(cardHand[result[p][0] + j])\r\n      temp.push(cardHand[result[p][1] + j])\r\n      fifteenTriplets.push(temp)\r\n    }\r\n    pairTarget = target - hand[0]\r\n    hand.shift()\r\n  }\r\n  return fifteenTriplets\r\n}\r\n\r\n/**\r\n * Returns sets of four cards that sum to the target value\r\n * @param {string[]} cardHand - Array of cards\r\n * @param {number} target - Target value that the 4 cards should sum to\r\n * @return {Array<Array<string>>} Array of quartets representing cards that sum to the target value\r\n * @example\r\n * [['qh', '3d', 'ad', 'as'], ['4s', '3h', '5s', '3h']]\r\n *\r\n */\r\nfunction getFifteenQuartets(cardHand, target = 15) {\r\n  let fifteenQuartets = []\r\n  let hand = convertToIntegers(cardHand)\r\n  for (let i = 0; i < hand.length; i++) {\r\n    let sum = hand[0] + hand[1] + hand[2] + hand[3] + hand[4] - hand[i]\r\n    if (sum === target) {\r\n      let result = [...cardHand]\r\n      result.splice(i, 1)\r\n      fifteenQuartets.push(result)\r\n    }\r\n  }\r\n  return fifteenQuartets\r\n}\r\n/**\r\n * Returns sets of five cards that sum to the target value\r\n * @param {string[]} cardHand - Array of cardes\r\n * @param {number} target - Target value that the 5 cards should sum to\r\n * @return {Array<Array<string>>} Array of quintets representing cards that sum to the target value\r\n * @example\r\n * [['qh', '2d', 'ad', 'as', 'ah']]\r\n *\r\n */\r\nfunction getFifteenQuintet(cardHand, target = 15) {\r\n  let fifteenQuartet = []\r\n  let hand = convertToIntegers(cardHand)\r\n  let sum = hand[0] + hand[1] + hand[2] + hand[3] + hand[4]\r\n  if (sum === target) {\r\n    fifteenQuartet.push(cardHand)\r\n  }\r\n  return fifteenQuartet\r\n}\r\n\r\n/**\r\n * Returns sets of four or five cards that are the same suit\r\n * @param {string[]} cardHand - Array of cardes\r\n * @return {Array<Array<Card>>} Array of Cards representing a flush\r\n *\r\n */\r\nexport function getFlushes(cardHand) {\r\n  const copyOfHand = [...cardHand]\r\n  // check for five card flush (all suits are equal)\r\n  const checkAllEqual = arr => arr.every(card => card.suit === arr[0].suit)\r\n\r\n  let allEqual = checkAllEqual(copyOfHand)\r\n  if (allEqual) {\r\n    return copyOfHand\r\n  } else { // check for flush in forst four cards\r\n    copyOfHand.pop()\r\n    allEqual = checkAllEqual(copyOfHand)\r\n    if (allEqual) {\r\n      return copyOfHand\r\n    }\r\n  }\r\n  return []\r\n}\r\n\r\n// checks if the hand has a Jack that matches the suit of the community card\r\nexport function\r\n  getNibs(cards) {\r\n  let communitySuit = cards[4].suit\r\n  let result = []\r\n  for (let i = 0; i < cards.length - 1; i++) {\r\n    if (cards[i].value === 'JACK' && cards[i].suit === communitySuit) {\r\n      result.push(cards[i])\r\n      result.push(cards[4])\r\n    }\r\n  }\r\n  return result\r\n}\r\n\r\n/**\r\n     * Returns sets of three, four or five cards that are sequential ie; a run\r\n     * @param {string[]} cardHand - Array of cardes\r\n     * @return {Array<Array<Card>>} Array of Cards representing a run\r\n     *\r\n     */\r\nexport function getRuns(cardHand) {\r\n  let sortedCards = sortCards(cardHand)\r\n  let runsResult = []\r\n\r\n  let runOf5Found = true\r\n\r\n  // start by looking for runs of 5\r\n  for (let i = 0; i < 4; i++) {\r\n    if (sortedCards[i + 1].val - sortedCards[i].val !== 1) {\r\n      runOf5Found = false\r\n      break\r\n    }\r\n  }\r\n\r\n  // now look for runs of 4 using the 5 possible combos of 4 runs if there were no runs of 5\r\n  let runOf4Found = false\r\n  if (!runOf5Found) {\r\n    for (let i = 0; i < patternsOfFour.length; i++) {\r\n      if (findRun(sortedCards, patternsOfFour[i])) {\r\n        runsResult.push([sortedCards[patternsOfFour[i][0]], sortedCards[patternsOfFour[i][1]], sortedCards[patternsOfFour[i][2]], sortedCards[patternsOfFour[i][3]]])\r\n        runOf4Found = true\r\n      }\r\n    }\r\n  }\r\n  // now look for runs of 3 using the the 9 possible combos of 3 runs if there were no runs of 4\r\n  if (!runOf4Found && !runOf5Found) {\r\n    for (let i = 0; i < patternsOfThree.length; i++) {\r\n      if (findRun(sortedCards, patternsOfThree[i])) {\r\n        runsResult.push([sortedCards[patternsOfThree[i][0]], sortedCards[patternsOfThree[i][1]], sortedCards[patternsOfThree[i][2]]])\r\n      }\r\n    }\r\n  }\r\n  return runOf5Found ? [sortedCards] : runsResult\r\n}\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { getPairs, getFifteenSums, getFlushes, getNibs, getRuns } from '.././cribbage.js'\r\nconst uuid = require('uuid/v4')\r\n\r\nclass Results extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    // all 10 combinations that a run of three can have\r\n    this.patternsOfThree = [\r\n      [0, 1, 2],\r\n      [0, 1, 3],\r\n      [1, 2, 3],\r\n      [0, 1, 4],\r\n      [0, 2, 4],\r\n      [1, 2, 4],\r\n      [0, 3, 4],\r\n      [1, 3, 4],\r\n      [2, 3, 4],\r\n      [0, 2, 3]\r\n    ]\r\n  }\r\n\r\n  /**\r\n     * Highlight the cards in the hand that are part of the result\r\n     *\r\n     * @param {cards[]} Array of 5 cards\r\n     */\r\n  addHighlight(cards) {\r\n    const cardsToHighlight = cards.result ? cards.result : cards\r\n    for (let i = 0; i < cardsToHighlight.length; i++) {\r\n      const elem = document.getElementById(cardsToHighlight[i].code)\r\n      if (elem) {\r\n        elem.style.border = '3px solid #99FFFF'\r\n        elem.style['border-radius'] = '8px'\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Remove highlights on the cards.\r\n     *\r\n     * @param {cards[]} Array of 5 cards\r\n     */\r\n  removeHighlight(cards) {\r\n\r\n    const cardsToRemoveHighlight = cards.result ? cards.result : cards\r\n    for (let i = 0; i < cardsToRemoveHighlight.length; i++) {\r\n      const elem = document.getElementById(cardsToRemoveHighlight[i].code)\r\n      if (elem) {\r\n        elem.style.border = null\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Adds up all the scores from the various results\r\n     *\r\n     * @param {cards[]} card Array of cards that are pairs\r\n     * @param {cards[]} card Array of cards that sum to 15\r\n     * @param {cards[]} card Array of cards that form a run\r\n     * @param {cards[]} card Array of cards that have the same suit (4 or 5)\r\n     * @param {cards[]} card Array of 2 cards that form nibs\r\n     */\r\n  tallyTheScores(pairResult, sumsResult, runsResult, flushResult, nibsResult) {\r\n    let score = 0\r\n    for (let i = 0; i < pairResult.length; i++) {\r\n      score = score + pairResult[i].score\r\n    }\r\n    for (let i = 0; i < sumsResult.length; i++) {\r\n      score = score + 2\r\n    }\r\n    for (let i = 0; i < runsResult.length; i++) {\r\n      score = score + runsResult[i].length\r\n    }\r\n    if (flushResult.length > 0) {\r\n      score = score + flushResult.length\r\n    }\r\n    if (nibsResult.length > 0) {\r\n      score = score + 1\r\n    }\r\n    return score\r\n  }\r\n\r\n  render() {\r\n    let pairResults = []\r\n    const { cards } = this.props\r\n    const showResults = this.props.showResults\r\n\r\n    let displayPairs, displaySums, displayRuns, displayFlush, displayNibs\r\n    let sumsResult, flushResult, runsResult, nibsResult\r\n    let fullHand = [...cards]\r\n    let totalScore = 0\r\n\r\n    if (fullHand.length === 5) {\r\n      sumsResult = getFifteenSums(fullHand)\r\n      runsResult = getRuns(fullHand)\r\n      pairResults = getPairs(fullHand)\r\n      flushResult = getFlushes(fullHand)\r\n      nibsResult = getNibs(cards)\r\n      // add all the results of the sums\r\n      totalScore = this.tallyTheScores(pairResults, sumsResult, runsResult, flushResult, nibsResult)\r\n    }\r\n\r\n    const showResultsCheckbox = <div className='show-results'>\r\n      <label className='cribbage-checkbox'><input type='checkbox' inline='true' checked={showResults} onChange={this.props.setShowResults} />{showResults ? 'Hide results' : 'Show results'}</label>\r\n    </div>\r\n\r\n    // Only show results if the full hand has been dealt\r\n    if (fullHand.length === 5) {\r\n      displayPairs = <div>{pairResults.map(result =>\r\n        <div key={uuid()}>\r\n          <section className='cribbage-results' onMouseOver={() => this.addHighlight(result)} onMouseOut={() => this.removeHighlight(result)}>\r\n            <div className='card-result'>{result.result.map(card =>\r\n              <img className='result-card' src={card.image} key={card.code} alt={card.code} />\r\n            )}\r\n            </div>\r\n            <div className='cribbage-points'><span className='cribbage-text'>{result.description} - Points: {result.score}</span></div>\r\n          </section>\r\n\r\n        </div>\r\n      )}</div>\r\n\r\n      displaySums = <div>{sumsResult.map(result =>\r\n        <div key={uuid()}>\r\n          <section className='cribbage-results' onMouseOver={() => this.addHighlight(result)} onMouseOut={() => this.removeHighlight(result)}>\r\n            <div className='card-result'>{result.map(card =>\r\n              <img className='result-card' src={card.image} key={card.code} alt={card.code} />\r\n            )}\r\n            </div>\r\n            <div className='cribbage-points'><span className='cribbage-text'>Sum to 15 - Points: 2</span></div>\r\n          </section>\r\n        </div>\r\n      )}</div>\r\n\r\n      displayRuns = <div>{runsResult.map(result =>\r\n        <div key={uuid()}>\r\n          <section className='cribbage-results' onMouseOver={() => this.addHighlight(result)} onMouseOut={() => this.removeHighlight(result)}>\r\n            <div className='card-result'>{result.map(card =>\r\n              <img className='result-card' src={card.image} key={card.code} alt={card.code} />\r\n            )}\r\n            </div>\r\n            <div className='cribbage-points'><span>Run - Points: {result.length}</span></div>\r\n          </section>\r\n        </div>\r\n      )}</div>\r\n\r\n      if (nibsResult.length > 0) {\r\n        displayNibs = <div>\r\n          <section className='cribbage-results' onMouseOver={() => this.addHighlight(nibsResult)} onMouseOut={() => this.removeHighlight(nibsResult)}>\r\n            <div className='card-result'>{nibsResult.map(card =>\r\n              <img className='result-card' src={card.image} key={card.code} alt={card.code} />\r\n            )}\r\n            </div>\r\n            <div className='cribbage-points'><span className='cribbage-text'>Nibs - Points: 1</span></div>\r\n          </section>\r\n        </div>\r\n      }\r\n      if (flushResult.length > 0) {\r\n        displayFlush = <div>\r\n          <section className='cribbage-results' onMouseOver={() => this.addHighlight(flushResult)} onMouseOut={() => this.removeHighlight(flushResult)}>\r\n            <div className='card-result'>{flushResult.map(card =>\r\n              <img className='result-card' src={card.image} key={card.code} alt={card.code} />\r\n            )}\r\n            </div>\r\n            <div className='cribbage-points'><span className='cribbage-text'>Flush - Points: {flushResult.length}</span></div>\r\n          </section>\r\n        </div>\r\n      } else {\r\n        displayFlush = <div />\r\n      }\r\n    }\r\n\r\n    if (fullHand.length === 5) {\r\n      return <React.Fragment>\r\n        <div>{showResultsCheckbox}</div>\r\n        <div style={{ display: (showResults ? 'block' : 'none') }}>\r\n          <p className='cribbage-text'>Score = {totalScore}</p>\r\n          {displaySums}\r\n          {displayRuns}\r\n          {displayPairs}\r\n          {displayFlush}\r\n          {displayNibs}\r\n        </div>\r\n      </React.Fragment>\r\n    } else {\r\n      return (\r\n        <div>\r\n          {showResultsCheckbox}\r\n        </div>\r\n\r\n      )\r\n    }\r\n\r\n  }\r\n}\r\n\r\nResults.propTypes = {\r\n  cards: PropTypes.arrayOf(PropTypes.shape({\r\n    suit: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    image: PropTypes.string.isRequired,\r\n    code: PropTypes.string.isRequired\r\n  })).isRequired,\r\n  card: PropTypes.shape({\r\n    suit: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    image: PropTypes.string.isRequired,\r\n    code: PropTypes.string.isRequired\r\n  })\r\n}\r\n\r\nexport default connect((state, props) => {\r\n  return {\r\n    showResults: state.deck.showResults,\r\n    showCustomHand: state.deck.showCustomHand\r\n  }\r\n})(Results)\r\n\r\n//export default Results\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\n// Component Hand\r\nconst CustomHand = (props) => {\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault()\r\n    props.setShowCustomHand(false)\r\n  }\r\n\r\n  const handleChange = (event) => {\r\n    event.preventDefault()\r\n    props.onCustomHandChange(event.target.name, event.target.value)\r\n  }\r\n\r\n  const showCardOptions = (name, value) => {\r\n    return (\r\n      <div>\r\n        <select className='custom-select' value={value} name={name} onChange={handleChange}>\r\n          <option value='ACE'>Ace</option>\r\n          <option value='2'>Two</option>\r\n          <option value='3'>Three</option>\r\n          <option value='4'>Four</option>\r\n          <option value='5'>Five</option>\r\n          <option value='6'>Six</option>\r\n          <option value='7'>Seven</option>\r\n          <option value='8'>Eight</option>\r\n          <option value='9'>Nine</option>\r\n          <option value='10'>Ten</option>\r\n          <option value='JACK'>Jack</option>\r\n          <option value='QUEEN'>Queen</option>\r\n          <option value='KING'>King</option>\r\n        </select>\r\n      </div>\r\n    )\r\n  }\r\n  const showSuitOptions = (name, suit = 'SPADES') => {\r\n    return (\r\n      <div className='the-suits'>\r\n        <select className='custom-select' value={suit} name={name} onChange={handleChange}>\r\n          <option value='HEARTS'>Hearts</option>\r\n          <option value='DIAMONDS'>Diamonds</option>\r\n          <option value='SPADES'>Spades</option>\r\n          <option value='CLUBS'>Clubs</option>\r\n        </select>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const showCustomHandCheckbox = <div className='show-results'>\r\n    <label className='cribbage-checkbox'> <input type='checkbox' inline='true' checked={props.showCustomHand} onChange={props.setShowCustomHand} />Modify your cards</label>\r\n  </div>\r\n\r\n  if (props.cards.length === 5) {\r\n    return (\r\n      <React.Fragment>\r\n        <div>{showCustomHandCheckbox}</div>\r\n        <div style={{ display: (props.showCustomHand ? 'block' : 'none') }}>\r\n          <form onSubmit={handleSubmit}>\r\n            <div id='card-options'>\r\n              <div className='card-option'>\r\n                {showCardOptions('card1', props.cards[0].value)}\r\n                {showSuitOptions('suit1', props.cards[0].suit)}\r\n              </div>\r\n              <div className='card-option'>\r\n                {showCardOptions('card2', props.cards[1].value)}\r\n                {showSuitOptions('suit2', props.cards[1].suit)}\r\n              </div>\r\n              <div className='card-option'>\r\n                {showCardOptions('card3', props.cards[2].value)}\r\n                {showSuitOptions('suit3', props.cards[2].suit)}\r\n              </div>\r\n              <div className='card-option'>\r\n                {showCardOptions('card4', props.cards[3].value)}\r\n                {showSuitOptions('suit4', props.cards[3].suit)}\r\n              </div>\r\n              <div className='card-option'>\r\n                {showCardOptions('card5', props.cards[4].value)}\r\n                {showSuitOptions('suit5', props.cards[4].suit)}\r\n              </div>\r\n            </div>\r\n          </form >\r\n        </div>\r\n      </React.Fragment>\r\n    )\r\n  } else {\r\n    return (null)\r\n  }\r\n}\r\n\r\nexport default connect((state, props) => {\r\n  return {\r\n    showResults: state.deck.showResults,\r\n    showCustomHand: state.deck.showCustomHand\r\n  }\r\n})(CustomHand)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport * as actions from './actions/actions'\r\nimport swal from 'sweetalert'\r\nimport Hand from './components/Hand'\r\nimport Results from './components/Results'\r\nimport CustomHand from './forms/CustomHand'\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.getHand = this.getHand.bind(this)\r\n    this.sortHand = this.sortHand.bind(this)\r\n    this.setShowCustomHand = this.setShowCustomHand.bind(this)\r\n    this.setShowResults = this.setShowResults.bind(this)\r\n    this.onCustomHandChange = this.onCustomHandChange.bind(this)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n  }\r\n\r\n  componentDidMount() {\r\n    const url = 'https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1'\r\n    fetch(url)\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error('Network response was not OK')\r\n        }\r\n        return response.json()\r\n      }\r\n      )\r\n      .then(result => {\r\n        this.props.dispatch(actions.getNewDeck(result.deck_id, result.remaining, false)\r\n        )\r\n      })\r\n      .catch((error => {\r\n        console.error('A problem occurred fetching the hand: ', error)\r\n        this.props.dispatch(actions.showError(error.message))\r\n      }))\r\n  }\r\n\r\n  /**\r\n    * Used to map the value of the card to the code used by the cards API\r\n    */\r\n  codeMap = {\r\n    ACE: 'A',\r\n    2: 2,\r\n    3: 3,\r\n    4: 4,\r\n    5: 5,\r\n    6: 6,\r\n    7: 7,\r\n    8: 8,\r\n    9: 9,\r\n    10: 0,\r\n    JACK: 'J',\r\n    QUEEN: 'Q',\r\n    KING: 'K'\r\n  }\r\n\r\n  /*\r\n   * Gets a hand (5 cards) from the deckofcards API. A deck must exist.\r\n   *\r\n   * @returns {Cards[]} Array of 5 cards\r\n   * card.code        eg. JS, AD, 9H\r\n   * card.image       eg.\r\n   * card.cardsImages\r\n   * card. suits      eg. SPADES, DIAMONDS, HEARTS\r\n   * card.value       eg. JACK, ACE, 9\r\n   */\r\n  getHand() {\r\n    // make sure there are enough cards left in the deck\r\n    let url\r\n    if (this.props.cardsLeft < 5) {\r\n      swal('New deck', 'There are not enough cards left in the deck. Now using new deck', 'info')\r\n      url = 'https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1'\r\n      fetch(url)\r\n        .then(response => {\r\n          if (!response.ok) {\r\n            throw new Error('Network response was not OK')\r\n          }\r\n          return response.json()\r\n        })\r\n        .then(result => {\r\n          this.props.dispatch(actions.getNewDeck(result.deck_id, result.remaining, false))\r\n          url = 'https://deckofcardsapi.com/api/deck/' + result.deck_id + '/draw/?count=5'\r\n        })\r\n        .then(() => {\r\n          fetch(url)\r\n            .then(response =>\r\n              response.json()\r\n            )\r\n            .then(result => {\r\n              this.props.dispatch(actions.getNewCards(result.cards, result.remaining, false))\r\n            })\r\n        })\r\n        .catch((error => {\r\n          console.error('A problem occurred fetching the hand: ', error)\r\n          this.props.dispatch(actions.showError(error.message))\r\n        }))\r\n    } else {\r\n      url = 'https://deckofcardsapi.com/api/deck/' + this.props.deck_id + '/draw/?count=5'\r\n      fetch(url)\r\n        .then(response => {\r\n          if (!response.ok) {\r\n            throw new Error('Network response was not OK')\r\n          }\r\n          return response.json()\r\n        })\r\n        .then(result => {\r\n          this.props.dispatch(actions.getNewCards(result.cards, result.remaining, false))\r\n        })\r\n        .catch((error => {\r\n          console.error('A problem occurred fetching the hand: ', error)\r\n          this.props.dispatch(actions.showError(error.message))\r\n        }))\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Compares two cards to determine if the 'val' property of a card in\r\n     * greater of less than another card. Used by the sartHand(method)\r\n     *\r\n     * @param {Card} card Instance of a card.\r\n     * @param {Card} card Instance of the card to compare to.\r\n     * @returns {number} '1' if greater than, '-1' if less than\r\n     */\r\n  compareCardValues(cardA, cardB) {\r\n    let comparison = 0\r\n    if (cardA.val > cardB.val) {\r\n      comparison = 1\r\n    } else if (cardA.val < cardB.val) {\r\n      comparison = -1\r\n    }\r\n    return comparison\r\n  }\r\n\r\n  /**\r\n     * Sorts the hand based on the val property of each card in the hand\r\n     *\r\n     */\r\n  sortHand() {\r\n    let sortedHand = [...this.props.hand]\r\n    sortedHand.sort(this.compareCardValues)\r\n    this.props.dispatch(actions.sortHand(sortedHand))\r\n  }\r\n\r\n  /**\r\n     * Toggles the value of the 'showCustomHand' state value\r\n     *\r\n     */\r\n  setShowCustomHand() {\r\n    this.props.dispatch(actions.toggleShowCustomHand())\r\n  }\r\n\r\n  /**\r\n     * Toggles the value of the 'showResults' state value\r\n     *\r\n     */\r\n  setShowResults() {\r\n    this.props.dispatch(actions.toggleShowResults())\r\n  }\r\n  /**\r\n     * Generates the correct card code based on value and suit\r\n     *\r\n     * @param {string} value value of the card\r\n     * @param {string} suit suit of the card\r\n     * @return {string} the generated code\r\n     */\r\n  getCode(value, suit) {\r\n    return `${this.codeMap[value]}${suit.charAt(0)}`\r\n  }\r\n\r\n\r\n  /**\r\n     * Determine if the given card already exists in the hand\r\n     *\r\n     * @param {number} position the position in the hand of the card being changed\r\n     * @param {string} value value of the card (could be the value or the suit)\r\n     * @param {string} type flag to indicate if the suit or the value is changing\r\n     * @return {boolean} true if the card already exists in the hand, false if not.\r\n     */\r\n  alreadyExists(position, value, type) {\r\n    const hand = this.props.hand\r\n    let code\r\n    if (type === 'card') {\r\n      const suit = hand[position].suit\r\n      code = this.getCode(value, suit)\r\n    }\r\n    // suit part\r\n    if (type === 'suit') {\r\n      const val = hand[position].value\r\n      code = this.getCode(val, value)\r\n    }\r\n    for (let i = 0; i < hand.length; i++) {\r\n      if (hand[i].code === code) {\r\n        return true\r\n      }\r\n    }\r\n    return false\r\n\r\n  }\r\n\r\n  /**\r\n     * Change the value of a card in the hand\r\n     *\r\n     * @param {card} card the card that is to be changed\r\n     * @param {string} value the new value\r\n     * @return {card} card the new card with the updated value\r\n     */\r\n  changeCard(card, value) {\r\n    card.value = value\r\n\r\n    const newCode = this.getCode(value, card.suit)\r\n    card.code = newCode\r\n    const newImage = `https://deckofcardsapi.com/static/img/${newCode}.png`\r\n    card.image = newImage\r\n    return card\r\n  }\r\n\r\n  /**\r\n     * Change the suit of a card in the hand\r\n     *\r\n     * @param {card} card the card that is to be changed\r\n     * @param {string} suit the new suit\r\n     * @return {card} the new card with the updated suit\r\n     */\r\n  changeSuit(card, suit) {\r\n    card.suit = suit\r\n    const newCode = this.getCode(card.value, suit)\r\n    card.code = newCode\r\n    const newImage = `https://deckofcardsapi.com/static/img/${newCode}.png`\r\n    card.image = newImage\r\n    return card\r\n  }\r\n\r\n  /**\r\n     * Event fires when a card in the hand has been changed\r\n     *\r\n     * @param {string} name item to be changed ('card' or 'suit')\r\n     * @param {string} value the new value or suit\r\n     */\r\n  onCustomHandChange(name, value) {\r\n    // can determine the position in the hand array from he last character of the name\r\n    let position = name.charAt(name.length - 1) - 1\r\n    let hand = [...this.props.hand]\r\n    let card = hand[position]\r\n    let newCard\r\n    let toChange = name.slice(0, 4)   // 'suit' or 'card'\r\n    if (toChange === 'card') {\r\n      if (!this.alreadyExists(position, value, toChange)) {\r\n        newCard = this.changeCard(card, value)\r\n      } else {\r\n        swal('Oops!', 'You cannot have two identical cards in a hand.', 'warning')\r\n        return\r\n      }\r\n    } else if (toChange === 'suit') {\r\n      if (!this.alreadyExists(position, value, toChange)) {\r\n        newCard = this.changeSuit(card, value)\r\n      } else {\r\n        swal('Oops', 'You cannot have two identical cards in a hand.', 'warning')\r\n        return\r\n      }\r\n    }\r\n    hand[position] = newCard\r\n    this.props.dispatch(actions.changeHand(hand))\r\n  }\r\n\r\n  render() {\r\n\r\n    const cardsLeft = this.props.cardsLeft\r\n    const setShowCustomHand = this.setShowCustomHand\r\n    const setShowResults = this.setShowResults\r\n    const onCustomHandChange = this.onCustomHandChange\r\n    const showError = this.props.showError\r\n    const error = this.props.error\r\n    const hand = this.props.hand\r\n    let cards\r\n    if (hand) {\r\n      cards = hand\r\n    } else {\r\n      cards = []\r\n    }\r\n\r\n    let buttonText = ''\r\n    if (cardsLeft === 52) {\r\n      buttonText = 'Let\\'s play'\r\n    } else {\r\n      buttonText = 'Get new cards'\r\n    }\r\n    return (\r\n      <React.Fragment>\r\n        <header className='cribbage-header'>\r\n          <h1 className='cribbage-text'>Cribbage Hand Practice Tool</h1>\r\n          <p className='cribbage-text'>Practice your point counting skills.</p>\r\n          <div className='icon' />\r\n        </header>\r\n        <div className='container'>\r\n          <div className='result-row'>\r\n            <React.Fragment>\r\n              <Hand getHand={this.getHand} sortHand={this.sortHand} cardsLeft={cardsLeft} cards={cards} buttonText={buttonText} showError={showError} error={error} />\r\n            </React.Fragment>\r\n          </div>\r\n          <CustomHand cards={cards} setShowCustomHand={setShowCustomHand} onCustomHandChange={onCustomHandChange} />\r\n          <Results cards={cards} setShowResults={setShowResults} />\r\n        </div>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\nexport default connect((state, props) => {\r\n  return {\r\n    showResults: state.deck.showResults,\r\n    showCustomHand: state.deck.showCustomHand,\r\n    hand: state.deck.hand,\r\n    cardsLeft: state.deck.cardsLeft,\r\n    deck_id: state.deck.deck_id,\r\n    showError: state.deck.showError,\r\n    error: state.deck.error\r\n  }\r\n})(App)\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport store from './store/configureStore'\r\nimport { Provider } from 'react-redux'\r\nimport App from './App'\r\nimport './scss/styles.scss'\r\n\r\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'))\r\n","module.exports = __webpack_public_path__ + \"static/media/card_back.799786dd.jpg\";"],"sourceRoot":""}