{"version":3,"sources":["images/card_back.jpg","images/logo1.jpg","constants.js","reducers/deck.js","reducers/index.js","store/configureStore.js","actions/actions.js","components/Options.js","components/Hand.js","cribbage.js","components/Results.js","components/Buttons.js","forms/CustomHand.js","components/Main.js","components/About.js","components/Settings.js","components/Nav.js","App.js","index.js"],"names":["module","exports","ActionTypes","defaultState","deck","state","action","type","types","showResults","showCustomHand","deck_id","data","cardsLeft","showError","error","hand","sortedHand","newHand","combineReducers","logger","createLogger","collapsed","store","createStore","rootReducer","applyMiddleware","thunk","getNewDeck","getNewCards","cards","Options","props","showOptions","numberOfCards","className","checked","onChange","setShowCustomHand","setShowResults","Hand","cardsImages","length","map","card","index","src","image","key","code","id","alt","cardback","style","display","patternsOfThree","patternsOfFour","convertToIntegers","value","isNaN","parseInt","twoSum","arr","target","result","i","j","push","findRun","pattern","runFound","k","val","countOcurrences","c","count","getFifteenSums","sumPairs","cardHand","fifteenPairs","getFifteenPairs","sumTriplets","pairTarget","shift","start","fifteenTriplets","p","temp","getFifteenTriplets","sumQuartets","fifteenQuartets","sum","splice","getFifteenQuartets","sumQuintet","fifteenQuartet","getFifteenQuintet","getRuns","sortedCards","copyOfCards","sort","a","b","sortCards","runsResult","runOf5Found","runOf4Found","uuid","require","Results","cardsToHighlight","elem","document","getElementById","border","cardsToRemoveHighlight","pairResult","sumsResult","flushResult","nibsResult","score","displayPairs","displaySums","displayRuns","displayFlush","displayNibs","pairResults","this","fullHand","totalScore","charArray","convertToChars","uniqueSet","Set","uniqueValues","finalResult","resultObj","resultLength","description","getPairs","copyOfHand","checkAllEqual","every","suit","allEqual","pop","getFlushes","communitySuit","getNibs","tallyTheScores","onMouseOver","addHighlight","onMouseOut","removeHighlight","Fragment","Component","connect","Buttons","buttonText","onClick","getHand","sortHand","handleChange","event","preventDefault","onCustomHandChange","name","showCardOptions","showSuitOptions","onSubmit","Main","codeMap","ACE","2","3","4","5","6","7","8","9","10","JACK","QUEEN","KING","bind","url","swal","fetch","then","response","ok","Error","json","dispatch","actions","remaining","catch","console","message","cardA","cardB","comparison","compareCardValues","customHandDiv","classList","toggle","position","getCode","newCode","newImage","charAt","newCard","toChange","slice","alreadyExists","changeCard","changeSuit","propTypes","PropTypes","arrayOf","shape","string","isRequired","About","logo","href","Settings","Nav","navStyle","color","to","App","path","component","ReactDOM","render"],"mappings":"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","file":"static/js/main.917d3609.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/card_back.799786dd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo1.ae5ab87d.jpg\";","export const ActionTypes = {\r\n  TOGGLE_SHOW_RESULTS: 'TOGGLE_SHOW_RESULTS',\r\n  TOGGLE_SHOW_CUSTOM_HAND: 'TOGGLE_SHOW_CUSTOM_HAND',\r\n  GET_NEW_CARDS: 'GET_NEW_CARDS',\r\n  GET_NEW_DECK: 'GET_NEW_DECK',\r\n  SORT_HAND: 'SORT_HAND',\r\n  CHANGE_HAND: 'CHANGE_HAND',\r\n  SHOW_ERROR: 'SHOW_ERROR'\r\n}\r\n","import { ActionTypes as types } from '../constants'\r\n\r\nlet defaultState = {\r\n  'showResults': false,\r\n  'showCustomHand': false,\r\n  'showError': false,\r\n  'error': '',\r\n  'hand': [],\r\n  'cardsLeft': 0\r\n}\r\n\r\nfunction deck(state = defaultState, action) {\r\n  switch (action.type) {\r\n    case types.TOGGLE_SHOW_RESULTS:\r\n      return {\r\n        ...state,\r\n        showResults: !state.showResults,\r\n      }\r\n    case types.TOGGLE_SHOW_CUSTOM_HAND:\r\n      return {\r\n        ...state,\r\n        showCustomHand: !state.showCustomHand,\r\n      }\r\n    case types.GET_NEW_DECK:\r\n      return {\r\n        ...state,\r\n        deck_id: action.data.deck_id,\r\n        cardsLeft: action.data.cardsLeft,\r\n        showResults: action.data.showResults,\r\n        showError: false,\r\n        error: ''\r\n      }\r\n    case types.GET_NEW_CARDS:\r\n      return {\r\n        ...state,\r\n        hand: action.data.hand,\r\n        cardsLeft: action.data.cardsLeft,\r\n        showResults: action.data.showResults,\r\n        showError: false,\r\n        error: ''\r\n      }\r\n    case types.SORT_HAND:\r\n      return {\r\n        ...state,\r\n        hand: action.data.sortedHand\r\n      }\r\n    case types.CHANGE_HAND:\r\n      return {\r\n        ...state,\r\n        hand: action.data.newHand\r\n      }\r\n    case types.SHOW_ERROR:\r\n      return {\r\n        ...state,\r\n        showError: true,\r\n        error: action.data.error\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default deck\r\n","import { combineReducers } from 'redux'\r\n\r\nimport deck from './deck'\r\n\r\nexport default combineReducers({\r\n  deck: deck\r\n})\r\n","import { applyMiddleware, createStore } from 'redux'\r\nimport { createLogger } from 'redux-logger'\r\nimport thunk from 'redux-thunk'\r\n\r\nimport rootReducer from '../reducers/index'\r\n\r\n// create our own logger with the setting we want\r\nconst logger = createLogger({\r\n  collapsed: true\r\n})\r\n\r\nlet store = createStore(\r\n  rootReducer,\r\n  // Note: logger must be the last middleware to be applied\r\n  applyMiddleware(thunk, logger)\r\n)\r\n\r\nexport default store\r\n","import { ActionTypes as types } from '.././constants'\r\nexport function toggleShowResults() {\r\n  return {\r\n    type: types.TOGGLE_SHOW_RESULTS\r\n  }\r\n}\r\n\r\nexport function toggleShowCustomHand() {\r\n  return {\r\n    type: types.TOGGLE_SHOW_CUSTOM_HAND\r\n  }\r\n}\r\n\r\nexport function getNewDeck(deck_id, cardsLeft, showResults) {\r\n  return {\r\n    type: types.GET_NEW_DECK,\r\n    data: { deck_id: deck_id, cardsLeft: cardsLeft, showResults: showResults }\r\n  }\r\n}\r\n\r\nexport function getNewCards(cards, cardsLeft, showResults) {\r\n  return {\r\n    type: types.GET_NEW_CARDS,\r\n    data: { hand: cards, cardsLeft: cardsLeft, showResults: showResults }\r\n  }\r\n}\r\n\r\nexport function sortHand(sortedHand) {\r\n  return {\r\n    type: types.SORT_HAND,\r\n    data: { sortedHand: sortedHand }\r\n  }\r\n}\r\n\r\nexport function changeHand(newHand) {\r\n  return {\r\n    type: types.CHANGE_HAND,\r\n    data: { newHand: newHand }\r\n  }\r\n}\r\n\r\nexport function showError(error) {\r\n  return {\r\n    type: types.SHOW_ERROR,\r\n    data: { error: error }\r\n  }\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Options = (props) => {\r\n  const showOptions = (props.numberOfCards === 5)\r\n  const showResults = props.showResults\r\n  const showCustomHand = props.showCustomHand\r\n\r\n  if (showOptions) {\r\n    return (\r\n      <div className='cribbage-options'>\r\n        <label className='cribbage-checkbox'>\r\n          <input type='checkbox' checked={showCustomHand} onChange={props.setShowCustomHand} />Modify your cards\r\n        </label>\r\n        <label className='cribbage-checkbox'>\r\n          <input type='checkbox' checked={showResults} onChange={props.setShowResults} />{showResults ? 'Hide results' : 'Show results'}\r\n        </label>\r\n      </div>\r\n    )\r\n  } else {\r\n    return null\r\n  }\r\n}\r\nOptions.propTypes = {\r\n  showResults: PropTypes.bool.isRequired,\r\n  setShowResults: PropTypes.func.isRequired,\r\n  numberOfCards: PropTypes.number.isRequired\r\n}\r\n\r\nexport default Options\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport cardback from './../images/card_back.jpg'\r\n\r\n// Component Hand\r\nconst Hand = (props) => {\r\n  const cards = props.cards\r\n  const cardsLeft = props.cardsLeft\r\n  const showError = props.showError\r\n  const error = props.error\r\n  let cardsImages = []\r\n\r\n  if (cards.length > 0) {\r\n    cardsImages = cards.map((card, index) => {\r\n      if (index !== 4) {\r\n        return <img className='card' src={card.image} key={card.code} id={card.code} alt={card.code} />\r\n      } else {\r\n        return <img className='c-card' src={card.image} key={card.code} id={card.code} alt={card.code} />\r\n      }\r\n    })\r\n  } else {\r\n    cardsImages =\r\n      <div>\r\n        <img className='card' src={cardback} alt='1' />\r\n        <img className='card' src={cardback} alt='2' />\r\n        <img className='card' src={cardback} alt='3' />\r\n        <img className='card' src={cardback} alt='4' />\r\n        <img className='c-card' src={cardback} alt='5' />\r\n      </div>\r\n\r\n  }\r\n  return (\r\n    <div className='cards-section'>\r\n      <div style={{ display: (showError ? 'block' : 'none') }}><p className='connection-error'>{error}</p></div>\r\n      <div><p className='cribbage-text'>Cards remaining in deck: {cardsLeft}</p></div>\r\n      {cardsImages}\r\n    </div>\r\n  )\r\n}\r\n\r\nHand.propTypes = {\r\n  getHand: PropTypes.func.isRequired,\r\n  sortHand: PropTypes.func.isRequired,\r\n  cardsLeft: PropTypes.number.isRequired,\r\n  cards: PropTypes.arrayOf(PropTypes.shape({\r\n    suit: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    image: PropTypes.string.isRequired,\r\n    code: PropTypes.string.isRequired,\r\n  })).isRequired,\r\n}\r\n\r\nexport default Hand\r\n","\r\n// all 10 combinations that a run of three can have\r\nconst patternsOfThree = [\r\n  [0, 1, 2],  // First, second and third card\r\n  [0, 1, 3],  // First, second and fourth card\r\n  [1, 2, 3],  // Second, third and fourth card...\r\n  [0, 1, 4],\r\n  [0, 2, 4],\r\n  [1, 2, 4],\r\n  [0, 3, 4],\r\n  [1, 3, 4],\r\n  [2, 3, 4],\r\n  [0, 2, 3]\r\n]\r\n\r\n// all 4 combinations that a run of 4 can have\r\nconst patternsOfFour = [\r\n  [0, 1, 2, 3],\r\n  [0, 1, 2, 4],\r\n  [0, 1, 3, 4],\r\n  [0, 2, 3, 4],\r\n  [1, 2, 3, 4]\r\n]\r\n\r\n/**\r\n  * Converts each card to a simple integer\r\n  * ACE = 1, Facecards = 10\r\n  * @function convertToIntegers\r\n  * @param {Object[]} - Cards in the players hand\r\n  * @returns {number[]} - Array of numbers representing the cards\r\n  */\r\nfunction convertToIntegers(cards) {\r\n  let arrNoSuits = cards.map(card => card.value)\r\n  // change face cards and ace to numbers\r\n  let arrInteger = arrNoSuits.map(function(card) {\r\n    if (isNaN(card)) {\r\n      card = (card === 'ACE') ? 1 : 10\r\n    } else {\r\n      card = parseInt(card, 10)\r\n    }\r\n    return card\r\n  })\r\n  return arrInteger\r\n}\r\n\r\n/**\r\n  * Sorts the cards and adds 'val' property to represent the points value for each card.\r\n  * example: KING = 14, ACE = 1\r\n  * @function sortCards\r\n  *  @param {Object[]} - Cards in the players hand\r\n  *  @returns {Object[]} - Array of cards that are sorted and have numerica value added\r\n  */\r\nfunction sortCards(cards) {\r\n  let copyOfCards = [...cards]\r\n  for (let i = 0; i < cards.length; i++) {\r\n\r\n    switch (copyOfCards[i].value) {\r\n      case 'ACE':\r\n        copyOfCards[i].val = 1\r\n        break;\r\n      case 'JACK':\r\n        copyOfCards[i].val = 11\r\n        break;\r\n      case 'QUEEN':\r\n        copyOfCards[i].val = 12\r\n        break;\r\n      case 'KING':\r\n        copyOfCards[i].val = 13\r\n        break;\r\n      default:\r\n        copyOfCards[i].val = parseInt(copyOfCards[i].value, 10);\r\n    }\r\n  }\r\n  copyOfCards.sort((a, b) => a.val - b.val)\r\n  return copyOfCards\r\n}\r\n\r\nexport function sumTwoNumbers(a, b) {\r\n  let sum = a + b\r\n  return sum\r\n}\r\n\r\n/**\r\n* Returns array of two number pairs of numbers that sum to the target value\r\n* @function twoSum\r\n* @param {number[]} - Array of integers\r\n* @param {number} - Target value that the pairs should sum to\r\n* @return {number[number[]]} Array of pairs of numbers where each number represents the poistion in the hand\r\n* @example [[1,2], [3,5], [4,5]]\r\n*/\r\nfunction twoSum(arr, target = 15) {\r\n  let result = []\r\n  for (let i = 0; i < arr.length; i++) {\r\n    for (let j = i + 1; j < arr.length; j++) {\r\n      if (arr[i] + arr[j] === target) {\r\n        result.push([i, j])\r\n      }\r\n    }\r\n  }\r\n  return result\r\n}\r\n\r\n/**\r\n* Strips the card array down to a simple array of characters\r\n* @function convertToChars\r\n* @param {Object[]} - Cards in the players hand\r\n* @return {number[]} - Character value of each card\r\n* @example {'5', '4', 'ACE', 'KING', '7'}\r\n*/\r\nfunction convertToChars(cards) {\r\n  let charArray = []\r\n  cards.map(function(card) {\r\n    return charArray.push(card.value)\r\n  })\r\n  return charArray\r\n}\r\n\r\n// checks for a run in a given array of cards\r\n/**\r\n* Checks for a run in a given array of sorted cards\r\n* @function convertToChars\r\n* @param {Object[]} - Cards in the players hand\r\n* @param {number[]} - Pattern of cards to check\r\n* @return {bolean} - Run was found. True/False\r\n* @example {'5', '4', 'ACE', 'KING', '7'}\r\n*/\r\nfunction findRun(hand, pattern) {\r\n  let runFound = true\r\n  for (let k = 0; k < pattern.length - 1; k++) {\r\n    let result = hand[pattern[k + 1]].val - hand[pattern[k]].val\r\n    if (result === 1) {\r\n      continue\r\n    } else {\r\n      runFound = false\r\n    }\r\n  }\r\n  return runFound\r\n}\r\n// quick and dirty way to count occurences of a character in an array\r\nfunction countOcurrences(arr, c) {\r\n  let count = 0\r\n  for (let i = 0; i < arr.length; i++) {\r\n    if (arr[i] === c) {\r\n      count++\r\n    }\r\n  }\r\n  return count\r\n}\r\n\r\n// gets pairs, triplets and quartets of cards in a hand\r\nexport function getPairs(fullHand) {\r\n  // reduce the array to an array of chars\r\n  let charArray = convertToChars(fullHand)\r\n  // creating a set removes duplicates.\r\n  const uniqueSet = new Set(charArray)\r\n  // turn set back to array so that we have an\r\n  // array of unique values in the hand\r\n  const uniqueValues = [...uniqueSet]\r\n  let finalResult = []\r\n  // looping through 3 values - a, j and 3\r\n  for (let i = 0; i < uniqueValues.length; i++) {\r\n    let result = []\r\n    let occurences = countOcurrences(charArray, uniqueValues[i])\r\n    if (occurences > 1) {\r\n      // get index of each one\r\n      for (let k = 0; k < charArray.length; k++) {\r\n        if (uniqueValues[i] === charArray[k]) {\r\n          result.push(fullHand[k])\r\n        }\r\n      }\r\n      let resultObj = {}\r\n      resultObj.result = result\r\n      let resultLength = result.length\r\n      if (resultLength === 2) {\r\n        resultObj.description = 'Pair'\r\n        resultObj.score = 2\r\n      }\r\n      else if (resultLength === 3) {\r\n        resultObj.description = 'Three of a kind'\r\n        resultObj.score = 6\r\n      } else if (resultLength === 4) {\r\n        resultObj.description = 'Four of a kind'\r\n        resultObj.score = 12\r\n      }\r\n      finalResult.push(resultObj)\r\n    }\r\n  }\r\n  return finalResult\r\n}\r\n\r\nexport function getFifteenSums(cards) {\r\n  let totalSums = []\r\n  let sumPairs = getFifteenPairs(cards, 15)\r\n  let sumTriplets = getFifteenTriplets(cards, 15)\r\n  let sumQuartets = getFifteenQuartets(cards, 15)\r\n  let sumQuintet = getFifteenQuintet(cards, 15)\r\n\r\n  totalSums = [...sumPairs, ...sumTriplets, ...sumQuartets, ...sumQuintet]\r\n  return totalSums\r\n}\r\n\r\n\r\n/**\r\n * Returns sets of two cards that sum to the target value\r\n * @param {string[]} cardHand - Array of cards\r\n * @param {number} target - Target value that the 2 cards should sum to\r\n * @return {Array<Array<Cards>>} Array of cards representing cards that sum to the target value\r\n * @example\r\n * [['9h', '6d'], ['7s', '8h']\r\n *\r\n */\r\nfunction getFifteenPairs(cardHand, target = 15) {\r\n  // debugger\r\n  let hand = convertToIntegers(cardHand)\r\n  let result = twoSum(hand, target)\r\n  let fifteenPairs = []\r\n  for (let i = 0; i < result.length; i++) {\r\n    fifteenPairs.push([cardHand[result[i][0]], cardHand[result[i][1]]])\r\n  }\r\n  return fifteenPairs\r\n}\r\n\r\n/**\r\n * Returns sets of three cards that sum to the target value\r\n * @param {string[]} cardHand - Array of cards\r\n * @param {number} target - Target value that the 3 cards should sum to\r\n * @return {Array<Array<string>>} Array of triplets representing cards that sum to the target value\r\n * @example\r\n * [['9h', '4d', '2d'], ['7s', '7h', 'as']\r\n *\r\n */\r\nfunction getFifteenTriplets(cardHand, target = 15) {\r\n  let hand = convertToIntegers(cardHand)\r\n  let pairTarget = target - hand[0]\r\n  hand.shift()\r\n  let start = 0\r\n  // let intermediateResult = []\r\n  let fifteenTriplets = []\r\n  for (let j = start + 1; j < hand.length + 2; j++) {\r\n    let result = twoSum(hand, pairTarget)\r\n    for (let p = 0; p < result.length; p++) {\r\n      let temp = [cardHand[j - 1]]\r\n      temp.push(cardHand[result[p][0] + j])\r\n      temp.push(cardHand[result[p][1] + j])\r\n      fifteenTriplets.push(temp)\r\n    }\r\n    pairTarget = target - hand[0]\r\n    hand.shift()\r\n  }\r\n  return fifteenTriplets\r\n}\r\n\r\n/**\r\n * Returns sets of four cards that sum to the target value\r\n * @param {string[]} cardHand - Array of cards\r\n * @param {number} target - Target value that the 4 cards should sum to\r\n * @return {Array<Array<string>>} Array of quartets representing cards that sum to the target value\r\n * @example\r\n * [['qh', '3d', 'ad', 'as'], ['4s', '3h', '5s', '3h']]\r\n *\r\n */\r\nfunction getFifteenQuartets(cardHand, target = 15) {\r\n  let fifteenQuartets = []\r\n  let hand = convertToIntegers(cardHand)\r\n  for (let i = 0; i < hand.length; i++) {\r\n    let sum = hand[0] + hand[1] + hand[2] + hand[3] + hand[4] - hand[i]\r\n    if (sum === target) {\r\n      let result = [...cardHand]\r\n      result.splice(i, 1)\r\n      fifteenQuartets.push(result)\r\n    }\r\n  }\r\n  return fifteenQuartets\r\n}\r\n/**\r\n * Returns sets of five cards that sum to the target value\r\n * @param {string[]} cardHand - Array of cardes\r\n * @param {number} target - Target value that the 5 cards should sum to\r\n * @return {Array<Array<string>>} Array of quintets representing cards that sum to the target value\r\n * @example\r\n * [['qh', '2d', 'ad', 'as', 'ah']]\r\n *\r\n */\r\nfunction getFifteenQuintet(cardHand, target = 15) {\r\n  let fifteenQuartet = []\r\n  let hand = convertToIntegers(cardHand)\r\n  let sum = hand[0] + hand[1] + hand[2] + hand[3] + hand[4]\r\n  if (sum === target) {\r\n    fifteenQuartet.push(cardHand)\r\n  }\r\n  return fifteenQuartet\r\n}\r\n\r\n/**\r\n * Returns sets of four or five cards that are the same suit\r\n * @param {string[]} cardHand - Array of cardes\r\n * @return {Array<Array<Card>>} Array of Cards representing a flush\r\n *\r\n */\r\nexport function getFlushes(cardHand) {\r\n  const copyOfHand = [...cardHand]\r\n  // check for five card flush (all suits are equal)\r\n  const checkAllEqual = arr => arr.every(card => card.suit === arr[0].suit)\r\n\r\n  let allEqual = checkAllEqual(copyOfHand)\r\n  if (allEqual) {\r\n    return copyOfHand\r\n  } else { // check for flush in forst four cards\r\n    copyOfHand.pop()\r\n    allEqual = checkAllEqual(copyOfHand)\r\n    if (allEqual) {\r\n      return copyOfHand\r\n    }\r\n  }\r\n  return []\r\n}\r\n\r\n// checks if the hand has a Jack that matches the suit of the community card\r\nexport function\r\n  getNibs(cards) {\r\n  let communitySuit = cards[4].suit\r\n  let result = []\r\n  for (let i = 0; i < cards.length - 1; i++) {\r\n    if (cards[i].value === 'JACK' && cards[i].suit === communitySuit) {\r\n      result.push(cards[i])\r\n      result.push(cards[4])\r\n    }\r\n  }\r\n  return result\r\n}\r\n\r\n/**\r\n     * Returns sets of three, four or five cards that are sequential ie; a run\r\n     * @param {string[]} cardHand - Array of cardes\r\n     * @return {Array<Array<Card>>} Array of Cards representing a run\r\n     *\r\n     */\r\nexport function getRuns(cardHand) {\r\n  let sortedCards = sortCards(cardHand)\r\n  let runsResult = []\r\n\r\n  let runOf5Found = true\r\n\r\n  // start by looking for runs of 5\r\n  for (let i = 0; i < 4; i++) {\r\n    if (sortedCards[i + 1].val - sortedCards[i].val !== 1) {\r\n      runOf5Found = false\r\n      break\r\n    }\r\n  }\r\n\r\n  // now look for runs of 4 using the 5 possible combos of 4 runs if there were no runs of 5\r\n  let runOf4Found = false\r\n  if (!runOf5Found) {\r\n    for (let i = 0; i < patternsOfFour.length; i++) {\r\n      if (findRun(sortedCards, patternsOfFour[i])) {\r\n        runsResult.push([sortedCards[patternsOfFour[i][0]], sortedCards[patternsOfFour[i][1]], sortedCards[patternsOfFour[i][2]], sortedCards[patternsOfFour[i][3]]])\r\n        runOf4Found = true\r\n      }\r\n    }\r\n  }\r\n  // now look for runs of 3 using the the 9 possible combos of 3 runs if there were no runs of 4\r\n  if (!runOf4Found && !runOf5Found) {\r\n    for (let i = 0; i < patternsOfThree.length; i++) {\r\n      if (findRun(sortedCards, patternsOfThree[i])) {\r\n        runsResult.push([sortedCards[patternsOfThree[i][0]], sortedCards[patternsOfThree[i][1]], sortedCards[patternsOfThree[i][2]]])\r\n      }\r\n    }\r\n  }\r\n  return runOf5Found ? [sortedCards] : runsResult\r\n}\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { getPairs, getFifteenSums, getFlushes, getNibs, getRuns } from '.././cribbage.js'\r\nconst uuid = require('uuid/v4')\r\n\r\nclass Results extends Component {\r\n  // eslint-disable-next-line\r\n  constructor(props) {\r\n    super(props)\r\n  }\r\n\r\n  /**\r\n     * Highlight the cards in the hand that are part of the result\r\n     *\r\n     * @param {cards[]} Array of 5 cards\r\n     */\r\n  addHighlight(cards) {\r\n    const cardsToHighlight = cards.result ? cards.result : cards\r\n    for (let i = 0; i < cardsToHighlight.length; i++) {\r\n      const elem = document.getElementById(cardsToHighlight[i].code)\r\n      if (elem) {\r\n        elem.style.border = '3px solid #77BBFF'\r\n        elem.style['border-radius'] = '8px'\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Remove highlights on the cards.\r\n     *\r\n     * @param {cards[]} Array of 5 cards\r\n     */\r\n  removeHighlight(cards) {\r\n\r\n    const cardsToRemoveHighlight = cards.result ? cards.result : cards\r\n    for (let i = 0; i < cardsToRemoveHighlight.length; i++) {\r\n      const elem = document.getElementById(cardsToRemoveHighlight[i].code)\r\n      if (elem) {\r\n        elem.style.border = null\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Adds up all the scores from the various results\r\n     *\r\n     * @param {cards[]} card Array of cards that are pairs\r\n     * @param {cards[]} card Array of cards that sum to 15\r\n     * @param {cards[]} card Array of cards that form a run\r\n     * @param {cards[]} card Array of cards that have the same suit (4 or 5)\r\n     * @param {cards[]} card Array of 2 cards that form nibs\r\n     */\r\n  tallyTheScores(pairResult, sumsResult, runsResult, flushResult, nibsResult) {\r\n    let score = 0\r\n    for (let i = 0; i < pairResult.length; i++) {\r\n      score = score + pairResult[i].score\r\n    }\r\n    for (let i = 0; i < sumsResult.length; i++) {\r\n      score = score + 2\r\n    }\r\n    for (let i = 0; i < runsResult.length; i++) {\r\n      score = score + runsResult[i].length\r\n    }\r\n    if (flushResult.length > 0) {\r\n      score = score + flushResult.length\r\n    }\r\n    if (nibsResult.length > 0) {\r\n      score = score + 1\r\n    }\r\n    return score\r\n  }\r\n\r\n  render() {\r\n    let pairResults = []\r\n    const { cards } = this.props\r\n    const showResults = this.props.showResults\r\n\r\n    let displayPairs, displaySums, displayRuns, displayFlush, displayNibs\r\n    let sumsResult, flushResult, runsResult, nibsResult\r\n    let fullHand = [...cards]\r\n    let totalScore = 0\r\n\r\n    if (fullHand.length === 5) {\r\n      sumsResult = getFifteenSums(fullHand)\r\n      runsResult = getRuns(fullHand)\r\n      pairResults = getPairs(fullHand)\r\n      flushResult = getFlushes(fullHand)\r\n      nibsResult = getNibs(fullHand)\r\n      // add all the results of the sums\r\n      totalScore = this.tallyTheScores(pairResults, sumsResult, runsResult, flushResult, nibsResult)\r\n    }\r\n\r\n    // Only show results if the full hand has been dealt\r\n    if (fullHand.length === 5) {\r\n      displayPairs = <div>{pairResults.map(result =>\r\n        <div key={uuid()}>\r\n          <section className='cribbage-result' onMouseOver={() => this.addHighlight(result)} onMouseOut={() => this.removeHighlight(result)}>\r\n            <div className='card-result'>{result.result.map(card =>\r\n              <img className='result-card' src={card.image} key={card.code} alt={card.code} />\r\n            )}\r\n            </div>\r\n            <div className='cribbage-points'><span className='cribbage-text'>{result.description} - Points: {result.score}</span></div>\r\n          </section>\r\n\r\n        </div>\r\n      )}</div>\r\n\r\n      displaySums = <div>{sumsResult.map(result =>\r\n        <div key={uuid()}>\r\n          <section className='cribbage-result' onMouseOver={() => this.addHighlight(result)} onMouseOut={() => this.removeHighlight(result)}>\r\n            <div className='card-result'>{result.map(card =>\r\n              <img className='result-card' src={card.image} key={card.code} alt={card.code} />\r\n            )}\r\n            </div>\r\n            <div className='cribbage-points'><span className='cribbage-text'>Sum to 15 - Points: 2</span></div>\r\n          </section>\r\n        </div>\r\n      )}</div>\r\n\r\n      displayRuns = <div>{runsResult.map(result =>\r\n        <div key={uuid()}>\r\n          <section className='cribbage-result' onMouseOver={() => this.addHighlight(result)} onMouseOut={() => this.removeHighlight(result)}>\r\n            <div className='card-result'>{result.map(card =>\r\n              <img className='result-card' src={card.image} key={card.code} alt={card.code} />\r\n            )}\r\n            </div>\r\n            <div className='cribbage-points'><span>Run - Points: {result.length}</span></div>\r\n          </section>\r\n        </div>\r\n      )}</div>\r\n\r\n      if (nibsResult.length > 0) {\r\n        displayNibs = <div>\r\n          <section className='cribbage-result' onMouseOver={() => this.addHighlight(nibsResult)} onMouseOut={() => this.removeHighlight(nibsResult)}>\r\n            <div className='card-result'>{nibsResult.map(card =>\r\n              <img className='result-card' src={card.image} key={card.code} alt={card.code} />\r\n            )}\r\n            </div>\r\n            <div className='cribbage-points'><span className='cribbage-text'>Nibs - Points: 1</span></div>\r\n          </section>\r\n        </div>\r\n      }\r\n      if (flushResult.length > 0) {\r\n        displayFlush = <div>\r\n          <section className='cribbage-result' onMouseOver={() => this.addHighlight(flushResult)} onMouseOut={() => this.removeHighlight(flushResult)}>\r\n            <div className='card-result'>{flushResult.map(card =>\r\n              <img className='result-card' src={card.image} key={card.code} alt={card.code} />\r\n            )}\r\n            </div>\r\n            <div className='cribbage-points'><span className='cribbage-text'>Flush - Points: {flushResult.length}</span></div>\r\n          </section>\r\n        </div>\r\n      } else {\r\n        displayFlush = <div />\r\n      }\r\n    }\r\n\r\n    if (fullHand.length === 5) {\r\n      return (\r\n        <React.Fragment>\r\n          <div className=\"cribbage-results\" style={{ display: (showResults ? 'block' : 'none') }}>\r\n            <p className='cribbage-text'>Score = {totalScore}</p>\r\n            {displaySums}\r\n            {displayRuns}\r\n            {displayPairs}\r\n            {displayFlush}\r\n            {displayNibs}\r\n          </div>\r\n        </React.Fragment>\r\n      )\r\n    }\r\n    else {\r\n      return null\r\n    }\r\n    //     <div>\r\n    //       {showResultsCheckbox}\r\n    //     </div>\r\n    //\r\n    //   )\r\n    //   }\r\n\r\n  }\r\n}\r\n\r\nResults.propTypes = {\r\n  cards: PropTypes.arrayOf(PropTypes.shape({\r\n    suit: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    image: PropTypes.string.isRequired,\r\n    code: PropTypes.string.isRequired\r\n  })).isRequired,\r\n  card: PropTypes.shape({\r\n    suit: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    image: PropTypes.string.isRequired,\r\n    code: PropTypes.string.isRequired\r\n  })\r\n}\r\n\r\nexport default connect((state, props) => {\r\n  return {\r\n    showResults: state.deck.showResults\r\n  }\r\n})(Results)\r\n\r\n//export default Results\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Buttons = (props) => {\r\n  const buttonText = props.buttonText\r\n\r\n  return (\r\n    <div className='cribbage-buttons'>\r\n      <button className='cribbage-button' onClick={() => props.getHand()}>{buttonText}</button>\r\n      <button className='cribbage-button' onClick={() => props.sortHand()}>Sort cards</button>\r\n    </div>\r\n  )\r\n}\r\nButtons.propTypes = {\r\n  getHand: PropTypes.func.isRequired,\r\n  sortHand: PropTypes.func.isRequired,\r\n  buttonText: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Buttons\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\n// Component Hand\r\nconst CustomHand = (props) => {\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault()\r\n    props.setShowCustomHand(false)\r\n  }\r\n\r\n  const handleChange = (event) => {\r\n    event.preventDefault()\r\n    props.onCustomHandChange(event.target.name, event.target.value)\r\n  }\r\n\r\n  const showCardOptions = (name, value) => {\r\n    return (\r\n      <div>\r\n        <select className='custom-select' value={value} name={name} onChange={handleChange}>\r\n          <option value='ACE'>Ace</option>\r\n          <option value='2'>Two</option>\r\n          <option value='3'>Three</option>\r\n          <option value='4'>Four</option>\r\n          <option value='5'>Five</option>\r\n          <option value='6'>Six</option>\r\n          <option value='7'>Seven</option>\r\n          <option value='8'>Eight</option>\r\n          <option value='9'>Nine</option>\r\n          <option value='10'>Ten</option>\r\n          <option value='JACK'>Jack</option>\r\n          <option value='QUEEN'>Queen</option>\r\n          <option value='KING'>King</option>\r\n        </select>\r\n      </div>\r\n    )\r\n  }\r\n  const showSuitOptions = (name, suit = 'SPADES') => {\r\n    return (\r\n      <div className='the-suits'>\r\n        <select className='custom-select' value={suit} name={name} onChange={handleChange}>\r\n          <option value='HEARTS'>Hearts</option>\r\n          <option value='DIAMONDS'>Diamonds</option>\r\n          <option value='SPADES'>Spades</option>\r\n          <option value='CLUBS'>Clubs</option>\r\n        </select>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (props.cards.length === 5) {\r\n    return (\r\n      <div id=\"customize-hand\" className=\"custom-selects\">\r\n        <form onSubmit={handleSubmit}>\r\n          <div id='card-options'>\r\n            <div className='card-option'>\r\n              {showCardOptions('card1', props.cards[0].value)}\r\n              {showSuitOptions('suit1', props.cards[0].suit)}\r\n            </div>\r\n            <div className='card-option'>\r\n              {showCardOptions('card2', props.cards[1].value)}\r\n              {showSuitOptions('suit2', props.cards[1].suit)}\r\n            </div>\r\n            <div className='card-option'>\r\n              {showCardOptions('card3', props.cards[2].value)}\r\n              {showSuitOptions('suit3', props.cards[2].suit)}\r\n            </div>\r\n            <div className='card-option'>\r\n              {showCardOptions('card4', props.cards[3].value)}\r\n              {showSuitOptions('suit4', props.cards[3].suit)}\r\n            </div>\r\n            <div className='card-option'>\r\n              {showCardOptions('card5', props.cards[4].value)}\r\n              {showSuitOptions('suit5', props.cards[4].suit)}\r\n            </div>\r\n          </div>\r\n        </form >\r\n      </div>\r\n    )\r\n  } else {\r\n    return (null)\r\n  }\r\n}\r\n\r\nexport default connect((state, props) => {\r\n  return {\r\n    showCustomHand: state.deck.showCustomHand\r\n  }\r\n})(CustomHand)\r\n","import React, { Component } from 'react'\r\nimport Options from './Options'\r\nimport * as actions from './../actions/actions'\r\nimport Hand from './Hand'\r\nimport Results from './Results'\r\nimport Buttons from './Buttons'\r\nimport CustomHand from '.././forms/CustomHand'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport swal from 'sweetalert'\r\n\r\nclass Main extends Component {\r\n  // eslint-disable-next-line\r\n  constructor(props) {\r\n    super(props)\r\n    this.getHand = this.getHand.bind(this)\r\n    this.sortHand = this.sortHand.bind(this)\r\n    this.setShowCustomHand = this.setShowCustomHand.bind(this)\r\n    this.setShowResults = this.setShowResults.bind(this)\r\n    this.onCustomHandChange = this.onCustomHandChange.bind(this)\r\n  }\r\n  /**\r\n    * Used to map the value of the card to the code used by the cards API\r\n    */\r\n  codeMap = {\r\n    ACE: 'A',\r\n    2: 2,\r\n    3: 3,\r\n    4: 4,\r\n    5: 5,\r\n    6: 6,\r\n    7: 7,\r\n    8: 8,\r\n    9: 9,\r\n    10: 0,\r\n    JACK: 'J',\r\n    QUEEN: 'Q',\r\n    KING: 'K'\r\n  }\r\n\r\n  /*\r\n   * Gets a hand (5 cards) from the deckofcards API. A deck must exist.\r\n   *\r\n   * @returns {Cards[]} Array of 5 cards\r\n   * card.code        eg. JS, AD, 9H\r\n   * card.image       eg.\r\n   * card.cardsImages\r\n   * card. suits      eg. SPADES, DIAMONDS, HEARTS\r\n   * card.value       eg. JACK, ACE, 9\r\n   */\r\n  getHand() {\r\n    // make sure there are enough cards left in the deck\r\n    let url\r\n    if (this.props.cardsLeft < 5) {\r\n      swal('New deck', 'There are not enough cards left in the deck. Now using new deck', 'info')\r\n      url = 'https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1'\r\n      fetch(url)\r\n        .then(response => {\r\n          if (!response.ok) {\r\n            throw new Error('Network response was not OK')\r\n          }\r\n          return response.json()\r\n        })\r\n        .then(result => {\r\n          this.props.dispatch(actions.getNewDeck(result.deck_id, result.remaining, false))\r\n          url = 'https://deckofcardsapi.com/api/deck/' + result.deck_id + '/draw/?count=5'\r\n        })\r\n        .then(() => {\r\n          fetch(url)\r\n            .then(response =>\r\n              response.json()\r\n            )\r\n            .then(result => {\r\n              this.props.dispatch(actions.getNewCards(result.cards, result.remaining, false))\r\n            })\r\n        })\r\n        .catch((error => {\r\n          console.error('A problem occurred fetching the hand: ', error)\r\n          this.props.dispatch(actions.showError(error.message))\r\n        }))\r\n    } else {\r\n      url = 'https://deckofcardsapi.com/api/deck/' + this.props.deck_id + '/draw/?count=5'\r\n      fetch(url)\r\n        .then(response => {\r\n          if (!response.ok) {\r\n            throw new Error('Network response was not OK')\r\n          }\r\n          return response.json()\r\n        })\r\n        .then(result => {\r\n          this.props.dispatch(actions.getNewCards(result.cards, result.remaining, false))\r\n        })\r\n        .catch((error => {\r\n          console.error('A problem occurred fetching the hand: ', error)\r\n          this.props.dispatch(actions.showError(error.message))\r\n        }))\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Compares two cards to determine if the 'val' property of a card in\r\n     * greater of less than another card. Used by the sartHand(method)\r\n     *\r\n     * @param {Card} card Instance of a card.\r\n     * @param {Card} card Instance of the card to compare to.\r\n     * @returns {number} '1' if greater than, '-1' if less than\r\n     */\r\n  compareCardValues(cardA, cardB) {\r\n    let comparison = 0\r\n    if (cardA.val > cardB.val) {\r\n      comparison = 1\r\n    } else if (cardA.val < cardB.val) {\r\n      comparison = -1\r\n    }\r\n    return comparison\r\n  }\r\n\r\n  /**\r\n     * Sorts the hand based on the val property of each card in the hand\r\n     *\r\n     */\r\n  sortHand() {\r\n    let sortedHand = [...this.props.hand]\r\n    sortedHand.sort(this.compareCardValues)\r\n    this.props.dispatch(actions.sortHand(sortedHand))\r\n  }\r\n\r\n  /**\r\n     * Toggles the value of the 'showResults' state value\r\n     *\r\n     */\r\n  setShowResults() {\r\n    this.props.dispatch(actions.toggleShowResults())\r\n  }\r\n\r\n  /**\r\n     * Toggles the value of the 'showCustomHand' state value\r\n     *\r\n     */\r\n  setShowCustomHand() {\r\n    this.props.dispatch(actions.toggleShowCustomHand())\r\n    const customHandDiv = document.getElementById('customize-hand')\r\n    if (customHandDiv) {\r\n      customHandDiv.classList.toggle('expanded')\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Determine if the given card already exists in the hand\r\n     *\r\n     * @param {number} position the position in the hand of the card being changed\r\n     * @param {string} value value of the card (could be the value or the suit)\r\n     * @param {string} type flag to indicate if the suit or the value is changing\r\n     * @return {boolean} true if the card already exists in the hand, false if not.\r\n     */\r\n  alreadyExists(position, value, type) {\r\n    const hand = this.props.hand\r\n    let code\r\n    if (type === 'card') {\r\n      const suit = hand[position].suit\r\n      code = this.getCode(value, suit)\r\n    }\r\n    // suit part\r\n    if (type === 'suit') {\r\n      const val = hand[position].value\r\n      code = this.getCode(val, value)\r\n    }\r\n    for (let i = 0; i < hand.length; i++) {\r\n      if (hand[i].code === code) {\r\n        return true\r\n      }\r\n    }\r\n    return false\r\n\r\n  }\r\n  /**\r\n     * Change the value of a card in the hand\r\n     *\r\n     * @param {card} card the card that is to be changed\r\n     * @param {string} value the new value\r\n     * @return {card} card the new card with the updated value\r\n     */\r\n  changeCard(card, value) {\r\n    card.value = value\r\n\r\n    const newCode = this.getCode(value, card.suit)\r\n    card.code = newCode\r\n    const newImage = `https://deckofcardsapi.com/static/img/${newCode}.png`\r\n    card.image = newImage\r\n    return card\r\n  }\r\n\r\n  /**\r\n     * Change the suit of a card in the hand\r\n     *\r\n     * @param {card} card the card that is to be changed\r\n     * @param {string} suit the new suit\r\n     * @return {card} the new card with the updated suit\r\n     */\r\n  changeSuit(card, suit) {\r\n    card.suit = suit\r\n    const newCode = this.getCode(card.value, suit)\r\n    card.code = newCode\r\n    const newImage = `https://deckofcardsapi.com/static/img/${newCode}.png`\r\n    card.image = newImage\r\n    return card\r\n  }\r\n\r\n  getCode(value, suit) {\r\n    return `${this.codeMap[value]}${suit.charAt(0)}`\r\n  }\r\n\r\n  onCustomHandChange(name, value) {\r\n    // can determine the position in the hand array from he last character of the name\r\n    let position = name.charAt(name.length - 1) - 1\r\n    let hand = [...this.props.hand]\r\n    let card = hand[position]\r\n    let newCard\r\n    let toChange = name.slice(0, 4)   // 'suit' or 'card'\r\n    if (toChange === 'card') {\r\n      if (!this.alreadyExists(position, value, toChange)) {\r\n        newCard = this.changeCard(card, value)\r\n      } else {\r\n        swal('Oops!', 'You cannot have two identical cards in a hand.', 'warning')\r\n        return\r\n      }\r\n    } else if (toChange === 'suit') {\r\n      if (!this.alreadyExists(position, value, toChange)) {\r\n        newCard = this.changeSuit(card, value)\r\n      } else {\r\n        swal('Oops', 'You cannot have two identical cards in a hand.', 'warning')\r\n        return\r\n      }\r\n    }\r\n    hand[position] = newCard\r\n    this.props.dispatch(actions.changeHand(hand))\r\n  }\r\n\r\n  render() {\r\n    const cardsLeft = this.props.cardsLeft\r\n    const setShowCustomHand = this.setShowCustomHand\r\n    const showCustomHand = this.props.showCustomHand\r\n    const setShowResults = this.setShowResults\r\n    const showResults = this.props.showResults\r\n    const onCustomHandChange = this.onCustomHandChange\r\n    const showError = this.props.showError\r\n    const error = this.props.error\r\n    const hand = this.props.hand\r\n    let cards\r\n    if (hand) {\r\n      cards = hand\r\n    } else {\r\n      cards = []\r\n    }\r\n\r\n    let buttonText = ''\r\n    if (cardsLeft === 52) {\r\n      buttonText = 'Let\\'s play'\r\n    } else {\r\n      buttonText = 'Get new cards'\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <div>\r\n          <Buttons getHand={this.getHand} sortHand={this.sortHand} buttonText={buttonText} />\r\n          <div className='player-hand'>\r\n            <Hand getHand={this.getHand} sortHand={this.sortHand} cardsLeft={cardsLeft} cards={cards} showError={showError} error={error} />\r\n            <CustomHand cards={cards} onCustomHandChange={onCustomHandChange} />\r\n          </div>\r\n          <Options setShowCustomHand={setShowCustomHand} showCustomHand={showCustomHand} onCustomHandChange={onCustomHandChange} numberOfCards={cards.length} showResults={showResults} setShowResults={setShowResults} />\r\n          <Results cards={cards} />\r\n        </div>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nResults.propTypes = {\r\n  cards: PropTypes.arrayOf(PropTypes.shape({\r\n    suit: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    image: PropTypes.string.isRequired,\r\n    code: PropTypes.string.isRequired\r\n  })).isRequired,\r\n  card: PropTypes.shape({\r\n    suit: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    image: PropTypes.string.isRequired,\r\n    code: PropTypes.string.isRequired\r\n  })\r\n}\r\n\r\nexport default connect((state) => {\r\n  return {\r\n    showResults: state.deck.showResults,\r\n    showCustomHand: state.deck.showCustomHand,\r\n    hand: state.deck.hand,\r\n    cardsLeft: state.deck.cardsLeft,\r\n    deck_id: state.deck.deck_id,\r\n    showError: state.deck.showError,\r\n    error: state.deck.error\r\n  }\r\n})(Main)\r\n","import React from 'react'\r\nimport logo from './../images/logo1.jpg'\r\n\r\nfunction About() {\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"logo\">\r\n        <img src={logo}></img>\r\n      </div>\r\n      <div className=\"about\">\r\n        <h1>About the practice tool</h1>\r\n        <p>The purpose of this tool is to create real life situations where you are presented with a random Cribbage hand and you will need to identify the number of points that the hand is worth.\r\n        There is also the ability to modify your hand to explore different scenarios by changing the card's value or suit in your hand or in the crib.\r\n        </p>\r\n        <br />\r\n        <p>You can see a complete set of rules for the game of Cribbage&nbsp;<a target=\"_blank\" href=\"https://bicyclecards.com/how-to-play/cribbage/\">&nbsp;here</a>.</p>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default About;\r\n","import React from 'react'\r\n\r\nfunction Settings() {\r\n  return (\r\n    <div>\r\n      <h1>Settings page: Coming soon to a browser near you.</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Settings;\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport logo from './../images/logo1.jpg'\r\n\r\n\r\nfunction Nav() {\r\n  const navStyle = {\r\n    color: 'white'\r\n  }\r\n\r\n  return (\r\n    <nav>\r\n      <h3><Link style={navStyle} to='/'><img className=\"logo\" src={logo}></img></Link></h3>\r\n      <ul className=\"nav-link\">\r\n        <Link style={navStyle} to='/settings'><li>Settings</li></Link>\r\n        <Link style={navStyle} to='/about'><li>About</li></Link>\r\n      </ul>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Nav\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\n\r\nimport * as actions from './actions/actions'\r\nimport Main from './components/Main'\r\nimport About from './components/About'\r\nimport Settings from './components/Settings'\r\nimport Nav from './components/Nav'\r\n\r\n\r\n\r\nclass App extends Component {\r\n  componentWillUnmount() {\r\n  }\r\n\r\n  componentDidMount() {\r\n    const url = 'https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1'\r\n    fetch(url)\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error('Network response was not OK')\r\n        }\r\n        return response.json()\r\n      }\r\n      )\r\n      .then(result => {\r\n        this.props.dispatch(actions.getNewDeck(result.deck_id, result.remaining, false)\r\n        )\r\n      })\r\n      .catch((error => {\r\n        console.error('A problem occurred fetching the hand: ', error)\r\n        this.props.dispatch(actions.showError(error.message))\r\n      }))\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <React.Fragment>\r\n          <header className='cribbage-header'>\r\n            <Nav />\r\n            <h1 className='cribbage-text'>Cribbage Hand Practice Tool</h1>\r\n            <p className='cribbage-text'>Practice your point counting skills.</p>\r\n            <div className='icon' />\r\n          </header>\r\n          <div className='app'>\r\n            <Switch>\r\n              <Route path=\"/main\" component={Main} />\r\n              <Route path=\"/settings\" component={Settings} />\r\n              <Route path=\"/about\" component={About} />\r\n              <Route path=\"/cribbage\" component={Main} />\r\n            </Switch>\r\n          </div>\r\n        </React.Fragment>\r\n      </Router>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default connect((state) => {\r\n  return {\r\n    hand: state.deck.hand,\r\n    cardsLeft: state.deck.cardsLeft,\r\n    deck_id: state.deck.deck_id,\r\n    showError: state.deck.showError,\r\n    error: state.deck.error\r\n  }\r\n})(App)\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport store from './store/configureStore'\r\nimport { Provider } from 'react-redux'\r\nimport App from './App'\r\nimport './scss/styles_modern.scss'\r\n\r\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'))\r\n"],"sourceRoot":""}